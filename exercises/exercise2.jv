pipeline TrainStopPipeline {

  pipe {
    from: TrainExtractor;
    to: TrainTextFileInterpreter;
  }

  TrainTextFileInterpreter -> TrainCSVInterpreter;

  TrainCSVInterpreter 
    -> TrainColumnDeleter
    -> TrainTableInterpreter
    -> TrainLoader;

  block TrainExtractor oftype HttpExtractor {
    url: "https://download-data.deutschebahn.com/static/datasets/haltestellen/D_Bahnhof_2020_alle.CSV";
  }

  block TrainTextFileInterpreter oftype TextFileInterpreter { }

  block TrainCSVInterpreter oftype CSVInterpreter {
    enclosing: '"';
    delimiter: ";";
  }

  block TrainColumnDeleter oftype ColumnDeleter {
    delete: [column J];
  }

  block TrainTableInterpreter oftype TableInterpreter {
    header: false;
    columns: [
      "EVA_NR" oftype integer,
      "DS100" oftype text,
      "IFOPT" oftype anychar,
      "NAME" oftype text,
      "Verkehr" oftype UsStateCode ,
      "Laenge" oftype VehicleIdentificationNumber10,
      "Breite" oftype VehicleIdentificationNumber10,
      "Betreiber_Name" oftype text,
      "Betreiber_Nr" oftype integer
    ];
    
  }
valuetype UsStateCode oftype text {
    constraints: [
        UsStateCodeAllowlist,
    ];
}
constraint UsStateCodeAllowlist on text:
    value in [
        "FV", "RV", "nur DPN",
    ];
valuetype VehicleIdentificationNumber10 oftype text {
    // 10. Valuetypes can be further refined by providing constraints.
    constraints: [
        ExactlyTenCharacters,
    ];
}
constraint ExactlyTenCharacters oftype LengthConstraint {
   minLength: -90;
   maxLength: 90;
 }
 valuetype anychar oftype text {
    constraints: [
        eggs,
    ];
}
 constraint eggs on text:
  value matches /..:[0-9]+:[0-9]+(:[0-9]+)?/;

  block TrainLoader oftype SQLiteLoader {
    table: "trainstops";
    file: "./trainstops.sqlite";
  }
}
